<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张峻滔的空间</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangjuntao.com.cn/"/>
  <updated>2018-01-21T15:50:30.979Z</updated>
  <id>http://zhangjuntao.com.cn/</id>
  
  <author>
    <name>Zhang Juntao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redux基本用发</title>
    <link href="http://zhangjuntao.com.cn/2018/01/21/redux%E5%9F%BA%E6%9C%AC%E7%94%A8%E5%8F%91/"/>
    <id>http://zhangjuntao.com.cn/2018/01/21/redux基本用发/</id>
    <published>2018-01-21T08:51:49.000Z</published>
    <updated>2018-01-21T15:50:30.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redux-是-JavaScript-状态容器，提供可预测化的状态管理。"><a href="#Redux-是-JavaScript-状态容器，提供可预测化的状态管理。" class="headerlink" title="Redux 是 JavaScript 状态容器，提供可预测化的状态管理。"></a>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。</h2><h3 id="Redux-是怎么做到可预测的呢？"><a href="#Redux-是怎么做到可预测的呢？" class="headerlink" title="Redux 是怎么做到可预测的呢？"></a>Redux 是怎么做到可预测的呢？</h3><ul><li>单一数据源，单一状态树，state</li><li>State 是只读的。所有数据都是只读的，要想修改数据，必须 dispatch 一个 action 来描述什么发生了改变。这样确保了视图和网络请求都不能直接修改 state，相反它们只能表达想要修改的意图</li><li>使用纯函数来执行修改。纯函数的返回值只由它调用时的参数决定，它的执行不依赖于系统的状态（比如：何时、何处调用它）。Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1516556564470&amp;di=0e989ab9d1043c819d607caffbabc36d&amp;imgtype=0&amp;src=http%3A%2F%2Fpic2.zhimg.com%2Fcb0c1722a4b1959fabe062bd053efa1d_r.png" alt=""></li><li><p>需要改变状态时，现派发一个动作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(action);</span><br></pre></td></tr></table></figure></li><li><p>Reducer匹配action类型，返回新的state</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function reducer(state=&#123;xx:xx&#125;,action) &#123;</span><br><span class="line">  switch (action.type)&#123;</span><br><span class="line">    case &apos;xxx&apos;:</span><br><span class="line">      return &#123;新的state&#125;;</span><br><span class="line">    case &apos;xxx&apos;:</span><br><span class="line">      return &#123;新的state&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  return state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>State 一旦有变化，Store 就会调用监听函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//通常在componentDidMount函数里设置监听函数</span><br><span class="line">//订阅 每次dispatch后更新状态</span><br><span class="line">store.subscribe(() =&gt; &#123;this.setState(&#123;n:store.getState().number&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="直接看一个简单的例子"><a href="#直接看一个简单的例子" class="headerlink" title="直接看一个简单的例子"></a>直接看一个简单的例子</h3><ul><li><p>index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import Counter from &apos;./Counter&apos;</span><br><span class="line">ReactDOM.render(&lt;Counter/&gt;, window.root)</span><br></pre></td></tr></table></figure></li><li><p>store.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createStore&#125; from &apos;redux&apos;;</span><br><span class="line">function reducer(state = &#123;number: 0&#125;, action) &#123;  //可以给state设置初始值</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &apos;ADD&apos;: //ADD、MINUS是提前定义好的各种action</span><br><span class="line">            return &#123;number: state.number + action.count&#125;; //匹配action中的type，返回新的state</span><br><span class="line">        case &apos;MINUS&apos;:</span><br><span class="line">            return &#123;number: state.number - action.count&#125;;</span><br><span class="line">        default:</span><br><span class="line">            return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default createStore(reducer);  //创建一个状态树</span><br></pre></td></tr></table></figure></li><li><p>Counter.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import store from &apos;./store.js&apos;;</span><br><span class="line">// 组件更新 属性的更新 更新状态 ,将redux中的数据转化成自己的状态</span><br><span class="line">export default class Counter extends React.Component &#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        super();</span><br><span class="line">        console.log(store.getState());</span><br><span class="line">        this.state = &#123;n:store.getState().number&#125;  //store.getState() 拿到store里的state</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        this.un = store.subscribe(() =&gt; &#123;  //订阅 每次dispatch后更新状态</span><br><span class="line">            this.setState(&#123;n:store.getState().number&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount()&#123; //组件销毁时 需要将其监听的函数移除掉</span><br><span class="line">        this.un();</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;()=&gt;&#123;  //每次dispatch后都需要重新更新状态=&gt;subscribe</span><br><span class="line">                store.dispatch(&#123;type:&apos;ADD&apos;,count:1&#125;)  //提交带有type属性的action</span><br><span class="line">            &#125;&#125;&gt;+&lt;/button&gt;</span><br><span class="line">            &lt;span&gt;&#123;this.state.n&#125;&lt;/span&gt;</span><br><span class="line">            &lt;button onClick=&#123;()=&gt;&#123;</span><br><span class="line">                store.dispatch(&#123;type:&apos;MINUS&apos;,count:1&#125;)</span><br><span class="line">            &#125;&#125;&gt;-&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redux-是-JavaScript-状态容器，提供可预测化的状态管理。&quot;&gt;&lt;a href=&quot;#Redux-是-JavaScript-状态容器，提供可预测化的状态管理。&quot; class=&quot;headerlink&quot; title=&quot;Redux 是 JavaScript 状
      
    
    </summary>
    
      <category term="redux" scheme="http://zhangjuntao.com.cn/categories/redux/"/>
    
    
      <category term="react redux" scheme="http://zhangjuntao.com.cn/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>Express的基础语法</title>
    <link href="http://zhangjuntao.com.cn/2018/01/08/Express%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://zhangjuntao.com.cn/2018/01/08/Express的基础语法/</id>
    <published>2018-01-08T04:12:16.000Z</published>
    <updated>2018-01-21T14:58:52.643Z</updated>
    
    <content type="html"><![CDATA[<p>express是node的一个框架，我们可以基于express快速搭建一个web服务，并且提供一些供客户端调用的api接口（支持中间件、支持路由处理等）；还有一个框架和它类似，叫做koa.</p><blockquote><p>学习Express：<br><a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="noopener">http://www.expressjs.com.cn/4x/api.html</a></p></blockquote><h3 id="安装Express"><a href="#安装Express" class="headerlink" title="安装Express"></a>安装Express</h3><p>如果当前电脑已经安装了yarn，我们可以基于yarn安装express及相关配套插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y  生成package.json文件</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * express：express核心框架</span><br><span class="line"> * body-parser：用来快速解析请求主体中内容的</span><br><span class="line"> * express-session / cookie-parser：方便我们在express中操作session的</span><br><span class="line"> */</span><br><span class="line">yarn add express body-parser express-session cookie-parser</span><br></pre></td></tr></table></figure></p><h3 id="创建服务，监听端口"><a href="#创建服务，监听端口" class="headerlink" title="创建服务，监听端口"></a>创建服务，监听端口</h3><p><code>基于NODE内置模块，使用原生JS代码实现WEB服务</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">url</span>:reqURL, method, headers&#125;=req,</span><br><span class="line">        &#123;pathname, query&#125;=url.parse(reqURL, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">'/getMatchList'</span> &amp;&amp; method==<span class="string">'GET'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pathname===<span class="string">'/reg'</span> &amp;&amp; method==<span class="string">'POST'</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(<span class="number">8888</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is success~`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>基于express框架完成</code></p><blockquote><p>express就是把我们自己用原生写的封装好了，我们以后直接调取使用即可（方便开发，有点类似于JQ）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express();</span><br><span class="line">app.listen(<span class="number">8888</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is success~`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">`/getMatchList`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    <span class="comment">//=&gt;等价于原生</span></span><br><span class="line">    <span class="comment">//req.url  请求的地址+问号传参</span></span><br><span class="line">    <span class="comment">//req.method 请求的方式(大写)</span></span><br><span class="line">    <span class="comment">//req.headers 请求头(小写)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=&gt;EXPRESS新提供的</span></span><br><span class="line">    <span class="comment">//req.path 相当于我们原生中通过URL内置模块的PARSE方法解析出来的PATH-NAME</span></span><br><span class="line">    <span class="comment">//req.query 相当于解析出来的QUERY</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=&gt;等价于原生</span></span><br><span class="line">    <span class="comment">//res.writeHead 重写响应头</span></span><br><span class="line">    <span class="comment">//res.write 响应主体</span></span><br><span class="line">    <span class="comment">//res.end 结束响应(响应主体)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     res.writeHead(200, &#123;</span></span><br><span class="line"><span class="comment">        'content-type': 'application/json'</span></span><br><span class="line"><span class="comment">     &#125;);</span></span><br><span class="line"><span class="comment">     res.end(JSON.stringify(&#123;"id": 1, "name": "zf "&#125;));//=&gt;只能返回字符串或者Buffer格式数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     //---------</span></span><br><span class="line"><span class="comment">     fs.readFile('./index.html',(err,data)=&gt;&#123;</span></span><br><span class="line"><span class="comment">         if(err) return;</span></span><br><span class="line"><span class="comment">         res.writeHead(200,&#123;</span></span><br><span class="line"><span class="comment">            'content-type':'text/html'</span></span><br><span class="line"><span class="comment">         &#125;);</span></span><br><span class="line"><span class="comment">         res.end(data);</span></span><br><span class="line"><span class="comment">     &#125;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     //=&gt;好麻烦</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=&gt;EXPRESS独有的</span></span><br><span class="line">    <span class="comment">//res.sendFile('./index.html',&#123;root:__dirname&#125;); 读取指定的文件，并且把内容响应给客户端</span></span><br><span class="line">    <span class="comment">//res.json(&#123;"id":1,"name":"zf"&#125;); 我们可以直接放JSON,EXPRESS帮我们把它转换为字符串返回给客户端（并且设置好了响应头信息）</span></span><br><span class="line">    <span class="comment">//res.send() 综合体</span></span><br><span class="line">    <span class="comment">//res.statusCode = 200; 设置状态码</span></span><br><span class="line">    <span class="comment">//res.redirect() 重定向(对应状态码中的302/301)</span></span><br><span class="line">    <span class="comment">//res.sendStatus(404); 返回状态码并且附带一些状态码的描述信息</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">`/reg`</span>, (req, res)=&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><blockquote><p>使用中间件的两大作用：<br>1、想要提取部分公共代码<br>2、想要在主体API逻辑处理前，做一些特殊处理（把传递的参数做特殊的处理）<br>…<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express();</span><br><span class="line">app.listen(<span class="number">8888</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is success~`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt;所有的客户端请求都会先执行这个中间件(然后执行NEXT后在进入下一个处理程序)</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//next:执行下一个处理(当前这个中间件根据情况，如果需要走到下一个操作，必须执行NEXT，如果不需要，直接响应内容即可)</span></span><br><span class="line">    <span class="keyword">if</span> (req.query.name) &#123;</span><br><span class="line">        req.userName = req.query.name;<span class="comment">//=&gt;把获取的内容写在了userName自定义属性上</span></span><br><span class="line">        next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">`name必须传递`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//=&gt;只有请求的地址中包含`/user`的才会进入这个中间件</span></span><br><span class="line">app.use(<span class="string">`/user`</span>, (req, res, next)=&gt; &#123;</span><br><span class="line">    req.userName += <span class="string">'@'</span>;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">`/user`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(<span class="string">`My name is <span class="subst">$&#123;req.userName&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">`/article`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(<span class="string">`Article author is <span class="subst">$&#123;req.userName&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Express中的路由router"><a href="#Express中的路由router" class="headerlink" title="Express中的路由router"></a>Express中的路由router</h3><blockquote><p>在真实项目中，我们为了有效的管理接口，我们会把相同功能体系的接口进行归类；在实现的时候，也会分类实现（分组管理）；</p><p>例如：<br>/user/signin<br>/user/signup</p><p>/product/query<br>/product/search</p><p>/log/info<br>  GET获取<br>  POST请求设置<br>  同一个地址，因为请求方式不一样，实现不一样的功能<br>…</p><p>此类操作，我们可以基于Express中的路由来完成</p></blockquote><p>1、我们创建一个routers文件夹，在这个文件夹中存储所有功能模块的接口信息（分类存储）<br><img src="./1515297612509.png" alt=""></p><p>2、在每一个路由模块中完成API接口的编写（举例：user模块）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    router = express.Router();<span class="comment">//=&gt;router和app其实差不多</span></span><br><span class="line">router.use(<span class="function">(<span class="params">req, res, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`ok`</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">`/signin`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'login success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">`/signup`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'register success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;<span class="comment">//=&gt;把创建的路由导出,方便后续调取使用</span></span><br></pre></td></tr></table></figure></p><p>3、在server中需要调取使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express();</span><br><span class="line">...</span><br><span class="line">app.use(<span class="string">`/user`</span>, <span class="built_in">require</span>(<span class="string">'./routers/user'</span>));</span><br></pre></td></tr></table></figure></p><h3 id="Express中获取客户端传递的信息"><a href="#Express中获取客户端传递的信息" class="headerlink" title="Express中获取客户端传递的信息"></a>Express中获取客户端传递的信息</h3><blockquote><p>客户端把信息传递给服务器：<br>1、问号传参（GET请求）<br>2、设置请求主体（POST请求）<br>3、设置请求头（cookie等信息传送）<br>…  </p></blockquote><p><code>问号传参 &amp; 请求头</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">`/query`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.headers);<span class="comment">//=&gt;通过REQ的HEADERS可以直接的获取请求头信息(想获取其中的某一个:REQ.HEADERS.HOST...)</span></span><br><span class="line"></span><br><span class="line">    res.send(req.query);<span class="comment">//=&gt;通过REQ中的QUERY就可以获取问号传递的参数值(并且存储的方式是KEY:VALUE)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>请求主体</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=&gt;基于传统的内置模块自己实现</span></span><br><span class="line">app.use(<span class="string">`/reg`</span>, (req, res, next)=&gt; &#123;</span><br><span class="line">    <span class="comment">//=&gt;POST请求获取请求主体内容,需要基于事件完成</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">``</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, chunk=&gt; &#123;</span><br><span class="line">        <span class="comment">//=&gt;正在接收请求主体中的内容(一般内容偏多)</span></span><br><span class="line">        str += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">'end'</span>, ()=&gt; &#123;</span><br><span class="line">        <span class="comment">//=&gt;接收结束,此时STR存储的就是传递进来的信息</span></span><br><span class="line">        <span class="comment">//=&gt;客户端传递给服务器的信息一般都是字符串格式的(JSON字符串或者普通的FORMAT-DATA字符串[xxx=xxx&amp;xxx=xxx])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//=&gt;真实项目中我们还要把字符串转化为对象方式(方便操作)</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">'querystring'</span>).parse(str);<span class="comment">//=&gt;这个内置模块就是把FORMAT-DATA变为对象键值对的方式存储</span></span><br><span class="line">        req.body = data;<span class="comment">//=&gt;把解析后的数据放到REQ的自定义属性上,在其它的方法中可以获取使用</span></span><br><span class="line">        next();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">`/reg`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这种方式太麻烦了，我们可以使用第三方插件搞定刚才处理的事情：<code>body-parser</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.raw());</span><br><span class="line">app.use(bodyParser.text());</span><br><span class="line">app.post(<span class="string">`/reg`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Express中静态文件的处理"><a href="#Express中静态文件的处理" class="headerlink" title="Express中静态文件的处理"></a>Express中静态文件的处理</h3><blockquote><p>基于express.static方法即可完成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express();</span><br><span class="line">app.listen(<span class="number">8888</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is success~`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt;真实项目中,我们一般都静态资源文件(HTML/CSS/JS/IMG...)存放在DIST或者LIB或者PUBLIC或者BUILD等指定的文件夹中</span></span><br><span class="line">app.use(express.static(<span class="string">'dist'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt;大体实现原理</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> expressStatic = <span class="function"><span class="params">p</span>=&gt;</span> (req, res, next)=&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> pathname = path.join(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/<span class="subst">$&#123;p&#125;</span>`</span>, req.path);</span><br><span class="line">    fs.readFile(pathname, (err, data)=&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">//=&gt;找不到指定的文件</span></span><br><span class="line">            next();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//=&gt;找到文件</span></span><br><span class="line">            res.sendFile(pathname);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">app.use(expressStatic(<span class="string">'dist'</span>));</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;express是node的一个框架，我们可以基于express快速搭建一个web服务，并且提供一些供客户端调用的api接口（支持中间件、支持路由处理等）；还有一个框架和它类似，叫做koa.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;学习Express：&lt;br&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Express" scheme="http://zhangjuntao.com.cn/categories/Express/"/>
    
    
      <category term="Express NODE" scheme="http://zhangjuntao.com.cn/tags/Express-NODE/"/>
    
  </entry>
  
</feed>
