<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张峻滔的空间</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jtao.pro/"/>
  <updated>2019-03-08T15:16:04.602Z</updated>
  <id>http://jtao.pro/</id>
  
  <author>
    <name>Zhang Juntao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack4.x常用配置</title>
    <link href="http://jtao.pro/2019/03/08/webpack4-x%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://jtao.pro/2019/03/08/webpack4-x常用配置/</id>
    <published>2019-03-08T14:31:19.000Z</published>
    <updated>2019-03-08T15:16:04.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> webpack-react</span><br><span class="line"><span class="keyword">cd</span> webpack-react</span><br><span class="line">npm init -<span class="built_in">y</span></span><br></pre></td></tr></table></figure><h2 id="安装webpack依赖"><a href="#安装webpack依赖" class="headerlink" title="安装webpack依赖"></a>安装webpack依赖</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-<span class="keyword">cli</span> -<span class="built_in">D</span></span><br></pre></td></tr></table></figure><p>注：在 webpack 3 中，webpack 和它的 CLI 都是在同一个包中，但在第4版中，他们已经将两者分开来更好地管理它们。所以安装时，最好是 webpack 和 webpack-cli 同时安装</p><p> 在package.json中添加webpack命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;·····</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack --mode development"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --mode production"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>–mode 模式 (必选，不然会有 WARNING)，是 webpack4 新增的参数选项，默认是 production</p><h2 id="常规配置-以打包react应用为例"><a href="#常规配置-以打包react应用为例" class="headerlink" title="常规配置(以打包react应用为例)"></a>常规配置(以打包react应用为例)</h2><h3 id="安装-react-和-react-dom-作为生产依赖"><a href="#安装-react-和-react-dom-作为生产依赖" class="headerlink" title="安装 react 和 react-dom 作为生产依赖"></a>安装 react 和 react-dom 作为生产依赖</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> react react-dom -S</span><br></pre></td></tr></table></figure><h3 id="安装-babel"><a href="#安装-babel" class="headerlink" title="安装 babel"></a>安装 babel</h3><p>安装 babel-loader，@babel/core，@babel/preset-env，@babel/preset-react 作为 dev 开发依赖<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader@8 @babel/core @babel/preset-<span class="keyword">env</span> @babel/preset-react -D</span><br></pre></td></tr></table></figure></p><p>babel-loader：使用 Babel 转换 JavaScript依赖关系的 Webpack 加载器<br> @babel/core：即 babel-core，将 ES6 代码转换为 ES5<br> @babel/preset-env：即 babel-preset-env，根据您要支持的浏览器，决定使用哪些 transformations / plugins 和 polyfills，例如为旧浏览器提供现代浏览器的新特性<br> @babel/preset-react：即 babel-preset-react，针对所有 React 插件的 Babel 预设，例如将 JSX 转换为函数<br>注：babel 7 使用了 @babel 命名空间来区分官方包，因此以前的官方包 babel-xxx 改成了 @babel/xxx</p><h3 id="webpack配置文件"><a href="#webpack配置文件" class="headerlink" title="webpack配置文件"></a>webpack配置文件</h3><p>简单介绍一下配置文件中常见的几大块内容<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"><span class="symbol">  entry:</span> &#123;&#125;, <span class="comment">// 打包入口：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始</span></span><br><span class="line"><span class="symbol">  output:</span> &#123;&#125;, <span class="comment">// 输出</span></span><br><span class="line"><span class="symbol">  resolve:</span> &#123;&#125;, <span class="comment">// 配置解析：配置别名、extensions 自动解析确定的扩展等等</span></span><br><span class="line"><span class="symbol">  devServer:</span> &#123;&#125;, <span class="comment">// 开发服务器：run dev/start 的配置，如端口、proxy等</span></span><br><span class="line"><span class="symbol">  module:</span> &#123;&#125;, <span class="comment">// 模块配置：配置loader（处理非 JavaScript 文件，比如 less、sass、jsx、图片等等）等</span></span><br><span class="line"><span class="symbol">  plugins:</span> [], <span class="comment">// 插件的配置：打包优化、资源管理和注入环境变量</span></span><br><span class="line"><span class="symbol">  optimization:</span>&#123;&#125;<span class="comment">//打包优化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在webpack.config.js中写入：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"><span class="symbol">  module:</span> &#123;</span><br><span class="line"><span class="symbol">    rules:</span> [</span><br><span class="line">      &#123;</span><br><span class="line"><span class="symbol">        test:</span> /\.js$/,</span><br><span class="line"><span class="symbol">        exclude:</span> /node_modules/, <span class="comment">//屏蔽不需要处理的文件夹</span></span><br><span class="line"><span class="symbol">        use:</span> &#123;</span><br><span class="line"><span class="symbol">          loader:</span> <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="创建-babelrc文件并配置"><a href="#创建-babelrc文件并配置" class="headerlink" title="创建.babelrc文件并配置"></a>创建.babelrc文件并配置</h3><p>npm install –save-dev @babel/plugin-transform-runtime<br>npm install –save @babel/runtime<br>以上两个插件通常都是一起装上， @babel/runtime用于打包到生产环境<br>transform-runtime可以重用Babel注入的帮助代码来减小codesize<br>transform-runtime 使用内置的一些东西例如Promise,Set,Symbol等，所以实例上不存在，如’aaa’.includes(‘a’)不可用<br>babel-polyfill则是通过改写全局prototype的方式实现，但体积大，避免全量引用<br>更多可阅读<a href="https://blog.csdn.net/real_bird/article/details/81157043" target="_blank" rel="noopener">babel-polyfill与babel-plugin-transform-runtime</a>、 <a href="https://github.com/creeperyang/blog/issues/25" target="_blank" rel="noopener">了解 Babel 6 &amp; 7 生态</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;@babel/preset-env&quot;,</span><br><span class="line">    &quot;@babel/preset-react&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;:[</span><br><span class="line">    [&quot;@babel/plugin-proposal-decorators&quot;, &#123; &quot;legacy&quot;: true &#125;],//处理装饰器 需安装插件 </span><br><span class="line">    [&quot;@babel/plugin-proposal-class-properties&quot;, &#123; &quot;loose&quot; : true &#125;],//处理类的属性</span><br><span class="line">    &quot;@babel/plugin-transform-runtime&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="创建应用文件"><a href="#创建应用文件" class="headerlink" title="创建应用文件"></a>创建应用文件</h3><p>在 src 目录下创建 index.js 文件渲染组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Index</span> /&gt;</span>, document.getElementById('app'));</span></span><br></pre></td></tr></table></figure></p><p>在 src 目录下创建 index.html 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>React、Webpack4 and Babel 7<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安装-html-webpack-plugin-开发依赖。"><a href="#安装-html-webpack-plugin-开发依赖。" class="headerlink" title="安装 html-webpack-plugin 开发依赖。"></a>安装 html-webpack-plugin 开发依赖。</h3><p>这个插件可以把打包后的静态资源自动添加到模板文件中<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-<span class="keyword">plugin</span> -<span class="built_in">D</span></span><br></pre></td></tr></table></figure></p><p>修改webpack.config.js<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">plugins</span>: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attribute">filename</span>: <span class="string">'index.html'</span>, <span class="comment">// 配置输出文件名和路径</span></span><br><span class="line">      <span class="attribute">template</span>: <span class="string">'./src/index.html'</span>, <span class="comment">// 配置要被编译的html文件</span></span><br><span class="line">      <span class="attribute">hash</span>: true, <span class="comment">//静态资源是否hash</span></span><br><span class="line">      <span class="comment">// 压缩 =&gt; production 模式使用</span></span><br><span class="line">      <span class="attribute">minify</span>: &#123;</span><br><span class="line">        <span class="attribute">removeAttributeQuotes</span>: true, <span class="comment">//删除双引号</span></span><br><span class="line">        <span class="attribute">collapseWhitespace</span>: true <span class="comment">//折叠 html 为一行</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure></p><h3 id="clean-webpack-plugin-插件"><a href="#clean-webpack-plugin-插件" class="headerlink" title="clean-webpack-plugin 插件"></a>clean-webpack-plugin 插件</h3><p>它可以在打包前清理指定的目录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> clean-webpack-<span class="keyword">plugin</span> -D</span><br></pre></td></tr></table></figure></p><p>修改 webpack.config.js 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="安装开发服务"><a href="#安装开发服务" class="headerlink" title="安装开发服务"></a>安装开发服务</h3><p>webpack-dev-server可以提供自动刷新、模拟数据以及跨域问题<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> webpack-dev-server -D</span><br></pre></td></tr></table></figure></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack-dev-server --open --mode development"</span>,</span><br><span class="line">  <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 react热更新：<br>安装loader<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span>  react-hot-loader -S</span><br></pre></td></tr></table></figure></p><p>修改webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>需要在入口文件 src/index.js文件末尾写入：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span>.<span class="title">hot</span>.<span class="title">accept</span>();</span></span><br></pre></td></tr></table></figure></p><p>跨域访问：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">hos<span class="variable">t:</span> <span class="string">'0.0.0.0'</span>, // 可通过<span class="number">127.0</span>.<span class="number">0.1</span>  localhost  或者 局域网本机ip访问</span><br><span class="line">    por<span class="variable">t:</span> <span class="string">'8888'</span>, //指定端口</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      <span class="built_in">index</span>: <span class="string">'/index.html'</span>, // 任意的 <span class="number">404</span> 响应都可能需要被替代为 <span class="built_in">index</span>.html</span><br><span class="line">    &#125;,</span><br><span class="line">    ho<span class="variable">t:</span> true,</span><br><span class="line">    <span class="keyword">open</span>: true,//启动服务时自动打开浏览器</span><br><span class="line">    overlay: &#123;//错误提示浮层</span><br><span class="line">      error: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    /*proxy: &#123;//代理</span><br><span class="line">      <span class="string">'/api'</span>: <span class="string">'http://localhost:3333'</span>,</span><br><span class="line">    &#125;,^/</span><br><span class="line">    // 重写路径 如：访问http://localhos<span class="variable">t:8888</span>/api/user相当于访问http://localhos<span class="variable">t:3333</span>/user</span><br><span class="line">    proxy: &#123;</span><br><span class="line">  <span class="string">"/api"</span>: &#123;</span><br><span class="line">    targe<span class="variable">t:</span> <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">    pathRewrite: &#123;<span class="string">"^/api"</span> : <span class="string">""</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">//前端模拟数据</span><br><span class="line">/*before(app)&#123;</span><br><span class="line">      app.<span class="built_in">get</span>(<span class="string">'/userInfo'</span>,(req,<span class="keyword">res</span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">res</span>.json(&#123;name:<span class="string">'Bob'</span>&#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;*/</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="处理css"><a href="#处理css" class="headerlink" title="处理css"></a>处理css</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">style</span>-loader css-loader -D</span><br></pre></td></tr></table></figure><p>还可以根据需要安装less、  sass<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less less-loader <span class="keyword">node</span><span class="title">-sass</span> sass-loader -D</span><br></pre></td></tr></table></figure></p><p>简单来说，style-loader是将css-loader打包好的css代码以<code>&lt;style&gt;</code> 标签的形式插入到html文件中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">test</span>: /\.css$/,</span><br><span class="line">  include: [path.<span class="built_in">resolve</span>(__dirname, <span class="string">'src'</span>)], //动指定必须处理的文件夹</span><br><span class="line">  use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果需要单独把 CSS 文件分离出来，我们需要使用 mini-css-extract-plugin 插件<br>抽取 css 到独立文件。optimize-css-assets-webpack-plugin插件用于压缩css<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mini-css-extract-<span class="keyword">plugin</span> optimize-css-assets-webpack-<span class="keyword">plugin</span> -<span class="built_in">D</span></span><br></pre></td></tr></table></figure></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">MiniCssExtractPlugin</span> <span class="string">=</span> <span class="string">require('mini-css-extract-plugin')</span></span><br><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">//</span> <span class="string">...</span></span><br><span class="line"><span class="attr">  module:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    rules:</span> <span class="string">[</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        test:</span> <span class="string">/\.css$/,</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">[path.resolve(__dirname,</span> <span class="string">'src'</span><span class="string">)],</span></span><br><span class="line"><span class="attr">        use:</span> <span class="string">[</span></span><br><span class="line">          <span class="string">MiniCssExtractPlugin.loader,</span></span><br><span class="line">          <span class="string">'css-loader'</span><span class="string">,</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line">      <span class="string">&#125;,</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        test:</span> <span class="string">/\.less$/,</span></span><br><span class="line"><span class="attr">        use:</span> <span class="string">[</span></span><br><span class="line">          <span class="string">MiniCssExtractPlugin.loader,</span></span><br><span class="line">          <span class="string">&#123;loader:</span> <span class="string">'css-loader'</span><span class="string">&#125;,</span></span><br><span class="line">          <span class="string">&#123;loader:</span> <span class="string">'less-loader'</span><span class="string">&#125;,</span></span><br><span class="line">          <span class="string">'postcss-loader'</span><span class="string">,</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line">      <span class="string">&#125;,</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  plugins:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">//...</span></span><br><span class="line">    <span class="string">new</span> <span class="string">MiniCssExtractPlugin(&#123;</span></span><br><span class="line"><span class="attr">      filename:</span> <span class="string">'[name].[contenthash:7].css'</span><span class="string">,</span> </span><br><span class="line">      <span class="string">//</span> <span class="attr">filename:</span> <span class="string">'css/[name].css'</span><span class="string">,</span>  <span class="string">//</span> <span class="string">输出到css文件夹下面</span></span><br><span class="line"><span class="attr">      chunkFilename:</span> <span class="string">'[id].[chunkhash:7].css'</span><span class="string">,</span></span><br><span class="line">    <span class="string">&#125;)</span></span><br><span class="line">  <span class="string">],</span></span><br><span class="line">  <span class="string">optimization</span> <span class="string">:&#123;</span></span><br><span class="line"><span class="attr">    minimizer:</span><span class="string">[</span></span><br><span class="line">      <span class="string">new</span> <span class="string">OptimizeCSSAssetsPlugin(&#123;//压缩css</span></span><br><span class="line"><span class="attr">        cssProcessorOptions:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">          safe:</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">      <span class="string">&#125;),</span></span><br><span class="line">      <span class="string">new</span> <span class="string">UglifyJsPlugin(&#123;</span> <span class="string">//压缩js</span></span><br><span class="line"><span class="attr">        cache:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">        parallel:</span> <span class="literal">true</span><span class="string">,//并发打包</span> <span class="string">同事压缩多个</span></span><br><span class="line"><span class="attr">        sourceMap:</span> <span class="literal">false</span><span class="string">,</span> <span class="string">//</span> <span class="string">set</span> <span class="string">to</span> <span class="literal">true</span> <span class="string">if</span> <span class="string">you</span> <span class="string">want</span> <span class="string">JS</span> <span class="string">source</span> <span class="string">maps</span></span><br><span class="line"><span class="attr">        uglifyOptions:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">          compress:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">      <span class="string">&#125;),</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>写 css 时不免要考虑到浏览器兼容问题，如 transform 属性，需要添加浏览器前缀以适配其他浏览器，使用到 postcss-loader 这个 loader，autoprefixer 是它的插件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">module<span class="selector-class">.exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        include: [path.resolve(__dirname, <span class="string">'src'</span>)],</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin<span class="selector-class">.loader</span>,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">  <span class="comment">//方式一，写成字符串'postcss-loader'，当前目录额外新建一个postcss.config.js文件：</span></span><br><span class="line">  <span class="string">'postcss-loader'</span>,</span><br><span class="line">  <span class="comment">//方式二,直接配置一个对象：</span></span><br><span class="line">          <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">            loader: 'postcss-loader',</span></span><br><span class="line"><span class="comment">            options: &#123;</span></span><br><span class="line"><span class="comment">              plugins: [require('autoprefixer')]</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;*/</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postcss.config.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;</span><br><span class="line">      <span class="string">'browsers'</span>: [<span class="string">'&gt; 1%'</span>, <span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="处理图片和字体"><a href="#处理图片和字体" class="headerlink" title="处理图片和字体"></a>处理图片和字体</h3><p>下面这两个loader通常都配合使用<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">i</span> <span class="selector-tag">url-loader</span> <span class="selector-tag">file-loader</span> <span class="selector-tag">-D</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 当文件小于9k，则转成base64   超过9k，则会默认使用file-loader把文件产出</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="attribute">test</span>: /\.(png|jpg|jpeg|gif|svg)/,</span><br><span class="line">  <span class="attribute">use</span>: &#123;</span><br><span class="line">    <span class="attribute">loader</span>: <span class="string">'url-loader'</span>,</span><br><span class="line">    <span class="attribute">options</span>: &#123;</span><br><span class="line">      <span class="comment">// name: assetsPath('images/[name].[hash:7].[ext]'), // 图片输出的路径</span></span><br><span class="line">      <span class="attribute">name</span>: <span class="string">'images/[name].[hash:7].[ext]'</span>, <span class="comment">// 图片输出的路径</span></span><br><span class="line">      <span class="attribute">limit</span>: <span class="number">9</span>*<span class="number">1024</span>,</span><br><span class="line">      <span class="attribute">publicPath</span>:<span class="string">'public'</span> <span class="comment">// 也给图片路径单独配置publicPath</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>html-withimg-loader：<br>html中直接使用img标签src加载图片的话，因为没有被依赖，图片将不会被打包。这个loader解决这个问题，图片会被打包，而且路径也处理妥当。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">loaders:</span> [</span><br><span class="line">    &#123;</span><br><span class="line"><span class="symbol">        test:</span> <span class="regexp">/\.(htm|html)$/</span>i,</span><br><span class="line"><span class="symbol">        loader:</span> <span class="string">'html-withimg-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="暴露全局变量"><a href="#暴露全局变量" class="headerlink" title="暴露全局变量"></a>暴露全局变量</h3><p>法一：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install expose-loader --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p><p>法二：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> webpack = <span class="keyword">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="params">...</span></span><br><span class="line">plugins:<span class="meta">[</span></span><br><span class="line"><span class="literal">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line"><span class="string">'$'</span>:<span class="string">'jquery'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">]</span>,</span><br><span class="line">// externals:<span class="meta">[</span><span class="string">'jquery'</span><span class="meta">]</span> //法三：引入（CDN ），不打包（externals配置项）</span><br></pre></td></tr></table></figure></p><h3 id="定义环境变量，"><a href="#定义环境变量，" class="headerlink" title="定义环境变量，"></a>定义环境变量，</h3><p>定义环境变量后，可以在自己的业务代码中使用变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line">...</span><br><span class="line">plugins:[</span><br><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">DEV:<span class="string">"'dev'"</span>, <span class="comment">// 不推荐  //=&gt;'dev'</span></span><br><span class="line">PRO:<span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>), <span class="comment">//推荐  //=&gt;'production'</span></span><br><span class="line">FLAG:<span class="string">'false'</span>,   <span class="comment">//=&gt;false</span></span><br><span class="line">EXPRESSION:<span class="string">'2+1'</span>, <span class="comment">//=&gt;3</span></span><br><span class="line">&#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">resolve</span>: &#123;</span><br><span class="line">  <span class="attribute">extensions</span>: [<span class="string">".js"</span>, <span class="string">".less"</span>, <span class="string">".json"</span>], //代码中引入文件时可以省略后缀名</span><br><span class="line">  alias: &#123; // 配置别名 方便后续直接引用别名，无须写很长的地址</span><br><span class="line">    <span class="string">'@'</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">    <span class="string">'jquery'</span>: <span class="string">'jquery/jquery.min.js'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建一个项目&quot;&gt;&lt;a href=&quot;#创建一个项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个项目&quot;&gt;&lt;/a&gt;创建一个项目&lt;/h2&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="webpack" scheme="http://jtao.pro/categories/webpack/"/>
    
    
      <category term="webpack4.x 项目构建" scheme="http://jtao.pro/tags/webpack4-x-%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Js中常用的设计模式</title>
    <link href="http://jtao.pro/2018/01/29/js%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jtao.pro/2018/01/29/js中常用的设计模式/</id>
    <published>2018-01-29T02:12:33.000Z</published>
    <updated>2018-01-29T07:11:37.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式的起源"><a href="#模式的起源" class="headerlink" title="模式的起源"></a>模式的起源</h2><p>模式并非起源于软件工程行业，而是建筑学领域。模式的研究起源于建筑设计大师Christopher Alexander关于城市规划和建筑设计的著作。但尽管著作针对建筑学领域，但实际上适用于所有的工程设计领域，包括软件开发设计领域。</p><ul><li>亚历山大在《建筑的永恒之道》里这样描述：模式是一条由三个部分组成的通用规则：它表示了<code>一个特定环境、一类问题和一个解决方案之间的关系</code>。每一个模式描述了一个<code>不断重复发生</code>的问题，以及该问题解决方案的核心设计。</li></ul><blockquote><p>在他的另一本书《建筑模式语言》中提到了现在已经定义了253种模式。比如：<br>说明城市主要的结构：亚文化区的镶嵌、分散的工作点、城市的魅力、地方交通区<br>住宅团组：户型混合、公共性的程度、住宅团组、联排式住宅、丘状住宅、老人天地室内环境和室外环境、阴和阳总是一气呵成<br>针对住宅：夫妻的领域、儿童的领域、朝东的卧室、农家的厨房、私家的沿街露台、个人居室、起居空间的序列、多床卧室、浴室、大储藏室</p></blockquote><ul><li><p>1987年，Ward Cunninghan和Kent Beck在一起用Smalltalk做设计用户界面的工作。他们决定使用Alexander的理论发展一个有五个模式的语言来指导Smalltalk的新手，因此，《Using Pattern Languages for Object-Oriented Programs》论文发表。Ward Cunninghan和Kent Beck是对设计模式的发展影响最大的先行者。</p></li><li><p>第一个也是可以说是在软件工程设计模式中出版的最具代表性的最具代表性的正式作品之一，是1994年的一本书《Design Patterns》，称为设计模式。这是由Erich Gamma，Richard Helm，Ralph Johnson和John Vlissides撰写的，该团体被称为“四人组”（或简称GoF）。<br>有兴趣的话大家可以看一下这篇文章 <a href="http://blog.csdn.net/aboutagirl/article/details/35855" target="_blank" rel="noopener">模式的简史和形而上学</a></p></li></ul><h2 id="设计模式的作用"><a href="#设计模式的作用" class="headerlink" title="设计模式的作用"></a>设计模式的作用</h2><blockquote><p>[ 开发 ]<br>开发效率高<br>利于团队协作</p><p>[ 维护 ]<br>有利于代码的升级改版<br>逻辑清晰，代码严谨，利于后期的维护</p><p>[ 通用 ]<br>我们依托设计模式可以实现组件化、模块化、插件化、框架化以及一些常用类库方法的编写</p></blockquote><h2 id="JS中常用的设计模式"><a href="#JS中常用的设计模式" class="headerlink" title="JS中常用的设计模式"></a>JS中常用的设计模式</h2><blockquote><p>单例设计模式、构造-原型设计模式、发布订阅设计模式…</p></blockquote><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例模式：把实现当前这个模块所有的属性和方法汇总到同一个命名空间下（分组作用，避免了全局变量的污染）</span></span><br><span class="line"><span class="keyword">var</span> app=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//实现当前模块具体业务逻辑的方法全部存放在闭包中</span></span><br><span class="line"><span class="keyword">var</span> fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//入口方法：控制当前模块具体的业务逻辑顺序</span></span><br><span class="line">fn();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">app.init();</span><br></pre></td></tr></table></figure><blockquote><p>单体模式的优点是：<br>  可以用来划分命名空间，减少全局变量的数量。<br>  使用单体模式可以使代码组织的更为一致，使代码容易阅读和维护。<br>  可以被实例化，且实例化一次。</p></blockquote><h2 id="构造原型模式：最贴近OOP面向对象编程思想的"><a href="#构造原型模式：最贴近OOP面向对象编程思想的" class="headerlink" title="构造原型模式：最贴近OOP面向对象编程思想的"></a>构造原型模式：最贴近OOP面向对象编程思想的</h2><blockquote><p>封装类库、插件或者UI组件，基本上都是基于构造原型模式来开发的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>.isCompatible=<span class="string">'addEventListener'</span> <span class="keyword">in</span> <span class="built_in">document</span>;<span class="comment">//=&gt;如果不兼容返回FALSE(IE6~8)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=&gt;挂载到原型上的方法</span></span><br><span class="line">css()&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=&gt;挂载到普通对象上的方法</span></span><br><span class="line"><span class="keyword">static</span> distinct()&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span> <span class="keyword">extends</span> <span class="title">Tool</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(...arg)&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.xxx=xxx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//挂载到子类原型上的方法</span></span><br><span class="line">bindData()&#123;</span><br><span class="line"><span class="keyword">this</span>.css();<span class="comment">//=&gt;把父类原型上的方法执行（子类继承了父类，那么子类的实例就可以调取父类原型上的方法了）</span></span><br><span class="line"><span class="keyword">this</span>.distinct===<span class="literal">undefined</span>;<span class="comment">//子类的实例只能调取父类原型上的方法和父类给实例提供的私有属性方法，但是父类做为普通对象加入的静态方法，子类的实例是无法调取的 (只有这样才可以调取使用：Tool.distinct())</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>我有三个类 A/B/C ，我想让C继承A和B<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="发布订阅设计模式"><a href="#发布订阅设计模式" class="headerlink" title="发布订阅设计模式"></a>发布订阅设计模式</h2><blockquote><p>俗称叫做“观察者模式”<br>不同于单例和构造，发布订阅是小型设计模式，应用到某一个具体的需求中：凡是当到达某个条件之后要执行N多方法，我们都可以依托于发布订阅设计模式管理和规划我们的JS代码</p><p>实现思路和原理：<br>1、我们先创建一个计划表（容器）<br>2、后期需要做什么事情，我们都依次把需要处理的事情增加到计划表中<br>3、当符合某个条件的时候，我们只需要通知计划表中的方法按照顺序依次执行即可</p></blockquote><p><code>JQ中的发布订阅</code></p><blockquote><p>JQ中提供了实现发布订阅设计模式的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="comment">// 将被添加到列表的一个简单的函数</span></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>) </span>&#123;</span><br><span class="line">          alert( <span class="string">"foo:"</span> + value );</span><br><span class="line">    &#125;;     </span><br><span class="line">    <span class="keyword">var</span> callbacks = $.Callbacks(); </span><br><span class="line">    <span class="comment">// 添加函数 "foo" 到列表</span></span><br><span class="line">    callbacks.add( foo ); </span><br><span class="line">    <span class="comment">// 传入参数调用所有回调列表</span></span><br><span class="line">    callbacks.fire( <span class="string">"hello"</span> ); <span class="comment">// 输出: "foo: hello"</span></span><br><span class="line">    callbacks.fire( <span class="string">"world"</span> ); <span class="comment">// 输出: "foo: world"     </span></span><br><span class="line">    <span class="comment">// 添加另一个函数到列表</span></span><br><span class="line">    <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"> value ,x</span>)</span>&#123;</span><br><span class="line">      alert( <span class="string">"bar:"</span> + value +x);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 添加这个函数到列表</span></span><br><span class="line">    callbacks.add( bar ); </span><br><span class="line">    <span class="comment">// callbacks.remove(fn);//=&gt;移除方法</span></span><br><span class="line">    <span class="comment">// 传入参数调用所有回调列表(按照顺序执行),"hello again",666 会分别作为实参传递给每一个需要执行的方法</span></span><br><span class="line">    callbacks.fire( <span class="string">"hello again"</span>,<span class="number">666</span> );</span><br><span class="line">    <span class="comment">// 输出:</span></span><br><span class="line">    <span class="comment">// "foo: hello again"</span></span><br><span class="line">    <span class="comment">// "bar: hello again666"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p><code>实现一个发布订阅</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clientList = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> add,</span><br><span class="line">        fire,</span><br><span class="line">        remove;</span><br><span class="line">    add = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!clientList[key]) &#123;</span><br><span class="line">            clientList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        clientList[key].push(fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fire = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    remove = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key对应的消息么有被人订阅</span></span><br><span class="line">        <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有传入fn(具体的回调函数), 表示取消key对应的所有订阅</span></span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 反向遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = fns.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">                <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">                    <span class="comment">// 删除订阅回调函数</span></span><br><span class="line">                    fns.splice(i, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add: add,</span><br><span class="line">        fire: fire,</span><br><span class="line">        remove: remove</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;     </span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a+<span class="string">'fn2'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a+<span class="string">'fn3'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Event.add(<span class="string">"commit"</span>, fn1)  <span class="comment">//订阅触发某状态时需要执行的函数</span></span><br><span class="line">Event.add(<span class="string">"commit"</span>, fn2)</span><br><span class="line">Event.remove(<span class="string">"commit"</span>, fn2)<span class="comment">//删除</span></span><br><span class="line">Event.add(<span class="string">"commit"</span>, fn3)</span><br><span class="line">Event.fire(<span class="string">"commit"</span>,<span class="number">10</span>); <span class="comment">//触发执行</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模式的起源&quot;&gt;&lt;a href=&quot;#模式的起源&quot; class=&quot;headerlink&quot; title=&quot;模式的起源&quot;&gt;&lt;/a&gt;模式的起源&lt;/h2&gt;&lt;p&gt;模式并非起源于软件工程行业，而是建筑学领域。模式的研究起源于建筑设计大师Christopher Alexander关
      
    
    </summary>
    
      <category term="js" scheme="http://jtao.pro/categories/js/"/>
    
    
      <category term="设计模式" scheme="http://jtao.pro/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Redux基本用发</title>
    <link href="http://jtao.pro/2018/01/21/redux%E5%9F%BA%E6%9C%AC%E7%94%A8%E5%8F%91/"/>
    <id>http://jtao.pro/2018/01/21/redux基本用发/</id>
    <published>2018-01-21T08:51:49.000Z</published>
    <updated>2018-01-29T06:57:43.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redux-是-JavaScript-状态容器，提供可预测化的状态管理。"><a href="#Redux-是-JavaScript-状态容器，提供可预测化的状态管理。" class="headerlink" title="Redux 是 JavaScript 状态容器，提供可预测化的状态管理。"></a>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。</h2><h2 id="Redux-是怎么做到可预测的呢？"><a href="#Redux-是怎么做到可预测的呢？" class="headerlink" title="Redux 是怎么做到可预测的呢？"></a>Redux 是怎么做到可预测的呢？</h2><ul><li>单一数据源，单一状态树，state</li><li>State 是只读的。所有数据都是只读的，要想修改数据，必须 dispatch 一个 action 来描述什么发生了改变。这样确保了视图和网络请求都不能直接修改 state，相反它们只能表达想要修改的意图</li><li>使用纯函数来执行修改。纯函数的返回值只由它调用时的参数决定，它的执行不依赖于系统的状态（比如：何时、何处调用它）。Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1516556564470&amp;di=0e989ab9d1043c819d607caffbabc36d&amp;imgtype=0&amp;src=http%3A%2F%2Fpic2.zhimg.com%2Fcb0c1722a4b1959fabe062bd053efa1d_r.png" alt></li><li><p>需要改变状态时，现派发一个动作</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(action)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>Reducer匹配action类型，返回新的state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state=&#123;xx:xx&#125;,action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'xxx'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;新的state&#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'xxx'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;新的state&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>State 一旦有变化，Store 就会调用监听函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通常在componentDidMount函数里设置监听函数</span></span><br><span class="line"><span class="comment">//订阅 每次dispatch后更新状态</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="keyword">this</span>.setState(&#123;<span class="attr">n</span>:store.getState().number&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="直接看一个简单的例子"><a href="#直接看一个简单的例子" class="headerlink" title="直接看一个简单的例子"></a>直接看一个简单的例子</h2><ul><li><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./Counter'</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span>/&gt;</span></span>, <span class="built_in">window</span>.root)</span><br></pre></td></tr></table></figure></li><li><p>store.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123;number: <span class="number">0</span>&#125;, action</span>) </span>&#123;  <span class="comment">//可以给state设置初始值</span></span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ADD'</span>: <span class="comment">//ADD、MINUS是提前定义好的各种action</span></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">number</span>: state.number + action.count&#125;; <span class="comment">//匹配action中的type，返回新的state</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'MINUS'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">number</span>: state.number - action.count&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer);  <span class="comment">//创建一个状态树</span></span><br></pre></td></tr></table></figure></li><li><p>Counter.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store.js'</span>;</span><br><span class="line"><span class="comment">// 组件更新 属性的更新 更新状态 ,将redux中的数据转化成自己的状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(store.getState());</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">n</span>:store.getState().number&#125;  <span class="comment">//store.getState() 拿到store里的state</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="keyword">this</span>.un = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  <span class="comment">//订阅 每次dispatch后更新状态</span></span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">n</span>:store.getState().number&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount()&#123; <span class="comment">//组件销毁时 需要将其监听的函数移除掉</span></span><br><span class="line">        <span class="keyword">this</span>.un();</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &lt;button onClick=&#123;()=&gt;&#123;  //每次dispatch后都需要重新更新状态=&gt;subscribe</span><br><span class="line">                store.dispatch(&#123;type:'ADD',count:1&#125;)  //提交带有type属性的action</span><br><span class="line"><span class="xml">            &#125;&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.n&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &lt;button onClick=&#123;()=&gt;&#123;</span><br><span class="line">                store.dispatch(&#123;type:'MINUS',count:1&#125;)</span><br><span class="line"><span class="xml">            &#125;&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redux-是-JavaScript-状态容器，提供可预测化的状态管理。&quot;&gt;&lt;a href=&quot;#Redux-是-JavaScript-状态容器，提供可预测化的状态管理。&quot; class=&quot;headerlink&quot; title=&quot;Redux 是 JavaScript 状
      
    
    </summary>
    
      <category term="redux" scheme="http://jtao.pro/categories/redux/"/>
    
    
      <category term="react redux" scheme="http://jtao.pro/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>Express的基础语法</title>
    <link href="http://jtao.pro/2018/01/08/Express%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://jtao.pro/2018/01/08/Express的基础语法/</id>
    <published>2018-01-08T04:12:16.000Z</published>
    <updated>2018-01-21T14:58:52.643Z</updated>
    
    <content type="html"><![CDATA[<p>express是node的一个框架，我们可以基于express快速搭建一个web服务，并且提供一些供客户端调用的api接口（支持中间件、支持路由处理等）；还有一个框架和它类似，叫做koa.</p><blockquote><p>学习Express：<br><a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="noopener">http://www.expressjs.com.cn/4x/api.html</a></p></blockquote><h3 id="安装Express"><a href="#安装Express" class="headerlink" title="安装Express"></a>安装Express</h3><p>如果当前电脑已经安装了yarn，我们可以基于yarn安装express及相关配套插件<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y  生成package.<span class="keyword">json文件</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">/*</span></span><br><span class="line"><span class="keyword"> </span>* express：express核心框架</span><br><span class="line"> * <span class="keyword">body-parser：用来快速解析请求主体中内容的</span></span><br><span class="line"> * express-session / cookie-parser：方便我们在express中操作session的</span><br><span class="line"> */</span><br><span class="line">yarn <span class="keyword">add </span>express <span class="keyword">body-parser </span>express-session cookie-parser</span><br></pre></td></tr></table></figure></p><h3 id="创建服务，监听端口"><a href="#创建服务，监听端口" class="headerlink" title="创建服务，监听端口"></a>创建服务，监听端口</h3><p><code>基于NODE内置模块，使用原生JS代码实现WEB服务</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">url</span>:reqURL, method, headers&#125;=req,</span><br><span class="line">        &#123;pathname, query&#125;=url.parse(reqURL, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">'/getMatchList'</span> &amp;&amp; method==<span class="string">'GET'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pathname===<span class="string">'/reg'</span> &amp;&amp; method==<span class="string">'POST'</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(<span class="number">8888</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is success~`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>基于express框架完成</code></p><blockquote><p>express就是把我们自己用原生写的封装好了，我们以后直接调取使用即可（方便开发，有点类似于JQ）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express();</span><br><span class="line">app.listen(<span class="number">8888</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is success~`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">`/getMatchList`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    <span class="comment">//=&gt;等价于原生</span></span><br><span class="line">    <span class="comment">//req.url  请求的地址+问号传参</span></span><br><span class="line">    <span class="comment">//req.method 请求的方式(大写)</span></span><br><span class="line">    <span class="comment">//req.headers 请求头(小写)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=&gt;EXPRESS新提供的</span></span><br><span class="line">    <span class="comment">//req.path 相当于我们原生中通过URL内置模块的PARSE方法解析出来的PATH-NAME</span></span><br><span class="line">    <span class="comment">//req.query 相当于解析出来的QUERY</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=&gt;等价于原生</span></span><br><span class="line">    <span class="comment">//res.writeHead 重写响应头</span></span><br><span class="line">    <span class="comment">//res.write 响应主体</span></span><br><span class="line">    <span class="comment">//res.end 结束响应(响应主体)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     res.writeHead(200, &#123;</span></span><br><span class="line"><span class="comment">        'content-type': 'application/json'</span></span><br><span class="line"><span class="comment">     &#125;);</span></span><br><span class="line"><span class="comment">     res.end(JSON.stringify(&#123;"id": 1, "name": "zf "&#125;));//=&gt;只能返回字符串或者Buffer格式数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     //---------</span></span><br><span class="line"><span class="comment">     fs.readFile('./index.html',(err,data)=&gt;&#123;</span></span><br><span class="line"><span class="comment">         if(err) return;</span></span><br><span class="line"><span class="comment">         res.writeHead(200,&#123;</span></span><br><span class="line"><span class="comment">            'content-type':'text/html'</span></span><br><span class="line"><span class="comment">         &#125;);</span></span><br><span class="line"><span class="comment">         res.end(data);</span></span><br><span class="line"><span class="comment">     &#125;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     //=&gt;好麻烦</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=&gt;EXPRESS独有的</span></span><br><span class="line">    <span class="comment">//res.sendFile('./index.html',&#123;root:__dirname&#125;); 读取指定的文件，并且把内容响应给客户端</span></span><br><span class="line">    <span class="comment">//res.json(&#123;"id":1,"name":"zf"&#125;); 我们可以直接放JSON,EXPRESS帮我们把它转换为字符串返回给客户端（并且设置好了响应头信息）</span></span><br><span class="line">    <span class="comment">//res.send() 综合体</span></span><br><span class="line">    <span class="comment">//res.statusCode = 200; 设置状态码</span></span><br><span class="line">    <span class="comment">//res.redirect() 重定向(对应状态码中的302/301)</span></span><br><span class="line">    <span class="comment">//res.sendStatus(404); 返回状态码并且附带一些状态码的描述信息</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">`/reg`</span>, (req, res)=&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><blockquote><p>使用中间件的两大作用：<br>1、想要提取部分公共代码<br>2、想要在主体API逻辑处理前，做一些特殊处理（把传递的参数做特殊的处理）<br>…<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express();</span><br><span class="line">app.listen(<span class="number">8888</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is success~`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt;所有的客户端请求都会先执行这个中间件(然后执行NEXT后在进入下一个处理程序)</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//next:执行下一个处理(当前这个中间件根据情况，如果需要走到下一个操作，必须执行NEXT，如果不需要，直接响应内容即可)</span></span><br><span class="line">    <span class="keyword">if</span> (req.query.name) &#123;</span><br><span class="line">        req.userName = req.query.name;<span class="comment">//=&gt;把获取的内容写在了userName自定义属性上</span></span><br><span class="line">        next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">`name必须传递`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//=&gt;只有请求的地址中包含`/user`的才会进入这个中间件</span></span><br><span class="line">app.use(<span class="string">`/user`</span>, (req, res, next)=&gt; &#123;</span><br><span class="line">    req.userName += <span class="string">'@'</span>;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">`/user`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(<span class="string">`My name is <span class="subst">$&#123;req.userName&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">`/article`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(<span class="string">`Article author is <span class="subst">$&#123;req.userName&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Express中的路由router"><a href="#Express中的路由router" class="headerlink" title="Express中的路由router"></a>Express中的路由router</h3><blockquote><p>在真实项目中，我们为了有效的管理接口，我们会把相同功能体系的接口进行归类；在实现的时候，也会分类实现（分组管理）；</p><p>例如：<br>/user/signin<br>/user/signup</p><p>/product/query<br>/product/search</p><p>/log/info<br>  GET获取<br>  POST请求设置<br>  同一个地址，因为请求方式不一样，实现不一样的功能<br>…</p><p>此类操作，我们可以基于Express中的路由来完成</p></blockquote><p>1、我们创建一个routers文件夹，在这个文件夹中存储所有功能模块的接口信息（分类存储）<br><img src="./1515297612509.png" alt></p><p>2、在每一个路由模块中完成API接口的编写（举例：user模块）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    router = express.Router();<span class="comment">//=&gt;router和app其实差不多</span></span><br><span class="line">router.use(<span class="function">(<span class="params">req, res, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`ok`</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">`/signin`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'login success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">`/signup`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'register success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;<span class="comment">//=&gt;把创建的路由导出,方便后续调取使用</span></span><br></pre></td></tr></table></figure></p><p>3、在server中需要调取使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express();</span><br><span class="line">...</span><br><span class="line">app.use(<span class="string">`/user`</span>, <span class="built_in">require</span>(<span class="string">'./routers/user'</span>));</span><br></pre></td></tr></table></figure></p><h3 id="Express中获取客户端传递的信息"><a href="#Express中获取客户端传递的信息" class="headerlink" title="Express中获取客户端传递的信息"></a>Express中获取客户端传递的信息</h3><blockquote><p>客户端把信息传递给服务器：<br>1、问号传参（GET请求）<br>2、设置请求主体（POST请求）<br>3、设置请求头（cookie等信息传送）<br>…  </p></blockquote><p><code>问号传参 &amp; 请求头</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">`/query`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.headers);<span class="comment">//=&gt;通过REQ的HEADERS可以直接的获取请求头信息(想获取其中的某一个:REQ.HEADERS.HOST...)</span></span><br><span class="line"></span><br><span class="line">    res.send(req.query);<span class="comment">//=&gt;通过REQ中的QUERY就可以获取问号传递的参数值(并且存储的方式是KEY:VALUE)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>请求主体</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=&gt;基于传统的内置模块自己实现</span></span><br><span class="line">app.use(<span class="string">`/reg`</span>, (req, res, next)=&gt; &#123;</span><br><span class="line">    <span class="comment">//=&gt;POST请求获取请求主体内容,需要基于事件完成</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">``</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, chunk=&gt; &#123;</span><br><span class="line">        <span class="comment">//=&gt;正在接收请求主体中的内容(一般内容偏多)</span></span><br><span class="line">        str += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">'end'</span>, ()=&gt; &#123;</span><br><span class="line">        <span class="comment">//=&gt;接收结束,此时STR存储的就是传递进来的信息</span></span><br><span class="line">        <span class="comment">//=&gt;客户端传递给服务器的信息一般都是字符串格式的(JSON字符串或者普通的FORMAT-DATA字符串[xxx=xxx&amp;xxx=xxx])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//=&gt;真实项目中我们还要把字符串转化为对象方式(方便操作)</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">'querystring'</span>).parse(str);<span class="comment">//=&gt;这个内置模块就是把FORMAT-DATA变为对象键值对的方式存储</span></span><br><span class="line">        req.body = data;<span class="comment">//=&gt;把解析后的数据放到REQ的自定义属性上,在其它的方法中可以获取使用</span></span><br><span class="line">        next();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">`/reg`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这种方式太麻烦了，我们可以使用第三方插件搞定刚才处理的事情：<code>body-parser</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.raw());</span><br><span class="line">app.use(bodyParser.text());</span><br><span class="line">app.post(<span class="string">`/reg`</span>, (req, res)=&gt; &#123;</span><br><span class="line">    res.send(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Express中静态文件的处理"><a href="#Express中静态文件的处理" class="headerlink" title="Express中静态文件的处理"></a>Express中静态文件的处理</h3><blockquote><p>基于express.static方法即可完成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>),</span><br><span class="line">    app = express();</span><br><span class="line">app.listen(<span class="number">8888</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is success~`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt;真实项目中,我们一般都静态资源文件(HTML/CSS/JS/IMG...)存放在DIST或者LIB或者PUBLIC或者BUILD等指定的文件夹中</span></span><br><span class="line">app.use(express.static(<span class="string">'dist'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt;大体实现原理</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> expressStatic = <span class="function"><span class="params">p</span>=&gt;</span> (req, res, next)=&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> pathname = path.join(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/<span class="subst">$&#123;p&#125;</span>`</span>, req.path);</span><br><span class="line">    fs.readFile(pathname, (err, data)=&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">//=&gt;找不到指定的文件</span></span><br><span class="line">            next();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//=&gt;找到文件</span></span><br><span class="line">            res.sendFile(pathname);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">app.use(expressStatic(<span class="string">'dist'</span>));</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;express是node的一个框架，我们可以基于express快速搭建一个web服务，并且提供一些供客户端调用的api接口（支持中间件、支持路由处理等）；还有一个框架和它类似，叫做koa.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;学习Express：&lt;br&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Express" scheme="http://jtao.pro/categories/Express/"/>
    
    
      <category term="Express NODE" scheme="http://jtao.pro/tags/Express-NODE/"/>
    
  </entry>
  
</feed>
