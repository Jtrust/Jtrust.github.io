[{"title":"Js中常用的设计模式","url":"http://zhangjuntao.com.cn/2018/01/29/js中常用的设计模式/","content":"<h2 id=\"模式的起源\"><a href=\"#模式的起源\" class=\"headerlink\" title=\"模式的起源\"></a>模式的起源</h2><p>模式并非起源于软件工程行业，而是建筑学领域。模式的研究起源于建筑设计大师Christopher Alexander关于城市规划和建筑设计的著作。但尽管著作针对建筑学领域，但实际上适用于所有的工程设计领域，包括软件开发设计领域。</p>\n<ul>\n<li>亚历山大在《建筑的永恒之道》里这样描述：模式是一条由三个部分组成的通用规则：它表示了<code>一个特定环境、一类问题和一个解决方案之间的关系</code>。每一个模式描述了一个<code>不断重复发生</code>的问题，以及该问题解决方案的核心设计。</li>\n</ul>\n<blockquote>\n<p>在他的另一本书《建筑模式语言》中提到了现在已经定义了253种模式。比如：<br>说明城市主要的结构：亚文化区的镶嵌、分散的工作点、城市的魅力、地方交通区<br>住宅团组：户型混合、公共性的程度、住宅团组、联排式住宅、丘状住宅、老人天地室内环境和室外环境、阴和阳总是一气呵成<br>针对住宅：夫妻的领域、儿童的领域、朝东的卧室、农家的厨房、私家的沿街露台、个人居室、起居空间的序列、多床卧室、浴室、大储藏室</p>\n</blockquote>\n<ul>\n<li><p>1987年，Ward Cunninghan和Kent Beck在一起用Smalltalk做设计用户界面的工作。他们决定使用Alexander的理论发展一个有五个模式的语言来指导Smalltalk的新手，因此，《Using Pattern Languages for Object-Oriented Programs》论文发表。Ward Cunninghan和Kent Beck是对设计模式的发展影响最大的先行者。</p>\n</li>\n<li><p>第一个也是可以说是在软件工程设计模式中出版的最具代表性的最具代表性的正式作品之一，是1994年的一本书《Design Patterns》，称为设计模式。这是由Erich Gamma，Richard Helm，Ralph Johnson和John Vlissides撰写的，该团体被称为“四人组”（或简称GoF）。<br>有兴趣的话大家可以看一下这篇文章 <a href=\"http://blog.csdn.net/aboutagirl/article/details/35855\" target=\"_blank\" rel=\"noopener\">模式的简史和形而上学</a></p>\n</li>\n</ul>\n<h2 id=\"设计模式的作用\"><a href=\"#设计模式的作用\" class=\"headerlink\" title=\"设计模式的作用\"></a>设计模式的作用</h2><blockquote>\n<p>[ 开发 ]<br>开发效率高<br>利于团队协作</p>\n<p>[ 维护 ]<br>有利于代码的升级改版<br>逻辑清晰，代码严谨，利于后期的维护</p>\n<p>[ 通用 ]<br>我们依托设计模式可以实现组件化、模块化、插件化、框架化以及一些常用类库方法的编写</p>\n</blockquote>\n<h2 id=\"JS中常用的设计模式\"><a href=\"#JS中常用的设计模式\" class=\"headerlink\" title=\"JS中常用的设计模式\"></a>JS中常用的设计模式</h2><blockquote>\n<p>单例设计模式、构造-原型设计模式、发布订阅设计模式…</p>\n</blockquote>\n<h2 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单例模式：把实现当前这个模块所有的属性和方法汇总到同一个命名空间下（分组作用，避免了全局变量的污染）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app=(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//实现当前模块具体业务逻辑的方法全部存放在闭包中</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fn=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tinit:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//入口方法：控制当前模块具体的业务逻辑顺序</span></span><br><span class=\"line\">\t\t\tfn();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">app.init();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>单体模式的优点是：<br>  可以用来划分命名空间，减少全局变量的数量。<br>  使用单体模式可以使代码组织的更为一致，使代码容易阅读和维护。<br>  可以被实例化，且实例化一次。</p>\n</blockquote>\n<h2 id=\"构造原型模式：最贴近OOP面向对象编程思想的\"><a href=\"#构造原型模式：最贴近OOP面向对象编程思想的\" class=\"headerlink\" title=\"构造原型模式：最贴近OOP面向对象编程思想的\"></a>构造原型模式：最贴近OOP面向对象编程思想的</h2><blockquote>\n<p>封装类库、插件或者UI组件，基本上都是基于构造原型模式来开发的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tool</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.isCompatible=<span class=\"string\">'addEventListener'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>;<span class=\"comment\">//=&gt;如果不兼容返回FALSE(IE6~8)</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//=&gt;挂载到原型上的方法</span></span><br><span class=\"line\">\tcss()&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//=&gt;挂载到普通对象上的方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> distinct()&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banner</span> <span class=\"keyword\">extends</span> <span class=\"title\">Tool</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(...arg)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.xxx=xxx;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//挂载到子类原型上的方法</span></span><br><span class=\"line\">\tbindData()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.css();<span class=\"comment\">//=&gt;把父类原型上的方法执行（子类继承了父类，那么子类的实例就可以调取父类原型上的方法了）</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.distinct===<span class=\"literal\">undefined</span>;<span class=\"comment\">//子类的实例只能调取父类原型上的方法和父类给实例提供的私有属性方法，但是父类做为普通对象加入的静态方法，子类的实例是无法调取的 (只有这样才可以调取使用：Tool.distinct())</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我有三个类 A/B/C ，我想让C继承A和B<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"发布订阅设计模式\"><a href=\"#发布订阅设计模式\" class=\"headerlink\" title=\"发布订阅设计模式\"></a>发布订阅设计模式</h2><blockquote>\n<p>俗称叫做“观察者模式”<br>不同于单例和构造，发布订阅是小型设计模式，应用到某一个具体的需求中：凡是当到达某个条件之后要执行N多方法，我们都可以依托于发布订阅设计模式管理和规划我们的JS代码</p>\n<p>实现思路和原理：<br>1、我们先创建一个计划表（容器）<br>2、后期需要做什么事情，我们都依次把需要处理的事情增加到计划表中<br>3、当符合某个条件的时候，我们只需要通知计划表中的方法按照顺序依次执行即可</p>\n</blockquote>\n<p><code>JQ中的发布订阅</code></p>\n<blockquote>\n<p>JQ中提供了实现发布订阅设计模式的方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// 将被添加到列表的一个简单的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">          alert( <span class=\"string\">\"foo:\"</span> + value );</span><br><span class=\"line\">    &#125;;     </span><br><span class=\"line\">    <span class=\"keyword\">var</span> callbacks = $.Callbacks(); </span><br><span class=\"line\">    <span class=\"comment\">// 添加函数 \"foo\" 到列表</span></span><br><span class=\"line\">    callbacks.add( foo ); </span><br><span class=\"line\">    <span class=\"comment\">// 传入参数调用所有回调列表</span></span><br><span class=\"line\">    callbacks.fire( <span class=\"string\">\"hello\"</span> ); <span class=\"comment\">// 输出: \"foo: hello\"</span></span><br><span class=\"line\">    callbacks.fire( <span class=\"string\">\"world\"</span> ); <span class=\"comment\">// 输出: \"foo: world\"     </span></span><br><span class=\"line\">    <span class=\"comment\">// 添加另一个函数到列表</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value ,x</span>)</span>&#123;</span><br><span class=\"line\">      alert( <span class=\"string\">\"bar:\"</span> + value +x);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 添加这个函数到列表</span></span><br><span class=\"line\">    callbacks.add( bar ); </span><br><span class=\"line\">    <span class=\"comment\">// callbacks.remove(fn);//=&gt;移除方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 传入参数调用所有回调列表(按照顺序执行),\"hello again\",666 会分别作为实参传递给每一个需要执行的方法</span></span><br><span class=\"line\">    callbacks.fire( <span class=\"string\">\"hello again\"</span>,<span class=\"number\">666</span> );</span><br><span class=\"line\">    <span class=\"comment\">// 输出:</span></span><br><span class=\"line\">    <span class=\"comment\">// \"foo: hello again\"</span></span><br><span class=\"line\">    <span class=\"comment\">// \"bar: hello again666\"</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p><code>实现一个发布订阅</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Event = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clientList = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> add,</span><br><span class=\"line\">        fire,</span><br><span class=\"line\">        remove;</span><br><span class=\"line\">    add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!clientList[key]) &#123;</span><br><span class=\"line\">            clientList[key] = [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        clientList[key].push(fn);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    fire = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = [].shift.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fns = clientList[key];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, fn; fn = fns[i++];) &#123;</span><br><span class=\"line\">            fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fns = clientList[key];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// key对应的消息么有被人订阅</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fns) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 没有传入fn(具体的回调函数), 表示取消key对应的所有订阅</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fn) &#123;</span><br><span class=\"line\">            fns &amp;&amp; (fns.length = <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 反向遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = fns.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> _fn = fns[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_fn === fn) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 删除订阅回调函数</span></span><br><span class=\"line\">                    fns.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        add: add,</span><br><span class=\"line\">        fire: fire,</span><br><span class=\"line\">        remove: remove</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> fn1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">&#125;;     </span><br><span class=\"line\"><span class=\"keyword\">var</span> fn2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a+<span class=\"string\">'fn2'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a+<span class=\"string\">'fn3'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Event.add(<span class=\"string\">\"commit\"</span>, fn1)  <span class=\"comment\">//订阅触发某状态时需要执行的函数</span></span><br><span class=\"line\">Event.add(<span class=\"string\">\"commit\"</span>, fn2)</span><br><span class=\"line\">Event.remove(<span class=\"string\">\"commit\"</span>, fn2)<span class=\"comment\">//删除</span></span><br><span class=\"line\">Event.add(<span class=\"string\">\"commit\"</span>, fn3)</span><br><span class=\"line\">Event.fire(<span class=\"string\">\"commit\"</span>,<span class=\"number\">10</span>); <span class=\"comment\">//触发执行</span></span><br></pre></td></tr></table></figure></p>\n","categories":["js"],"tags":["设计模式"]},{"title":"Redux基本用发","url":"http://zhangjuntao.com.cn/2018/01/21/redux基本用发/","content":"<h2 id=\"Redux-是-JavaScript-状态容器，提供可预测化的状态管理。\"><a href=\"#Redux-是-JavaScript-状态容器，提供可预测化的状态管理。\" class=\"headerlink\" title=\"Redux 是 JavaScript 状态容器，提供可预测化的状态管理。\"></a>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。</h2><h2 id=\"Redux-是怎么做到可预测的呢？\"><a href=\"#Redux-是怎么做到可预测的呢？\" class=\"headerlink\" title=\"Redux 是怎么做到可预测的呢？\"></a>Redux 是怎么做到可预测的呢？</h2><ul>\n<li>单一数据源，单一状态树，state</li>\n<li>State 是只读的。所有数据都是只读的，要想修改数据，必须 dispatch 一个 action 来描述什么发生了改变。这样确保了视图和网络请求都不能直接修改 state，相反它们只能表达想要修改的意图</li>\n<li>使用纯函数来执行修改。纯函数的返回值只由它调用时的参数决定，它的执行不依赖于系统的状态（比如：何时、何处调用它）。Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1516556564470&amp;di=0e989ab9d1043c819d607caffbabc36d&amp;imgtype=0&amp;src=http%3A%2F%2Fpic2.zhimg.com%2Fcb0c1722a4b1959fabe062bd053efa1d_r.png\" alt=\"\"></li>\n<li><p>需要改变状态时，现派发一个动作</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(action)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reducer匹配action类型，返回新的state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state=&#123;xx:xx&#125;,action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'xxx'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;新的state&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'xxx'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;新的state&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>State 一旦有变化，Store 就会调用监听函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通常在componentDidMount函数里设置监听函数</span></span><br><span class=\"line\"><span class=\"comment\">//订阅 每次dispatch后更新状态</span></span><br><span class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">n</span>:store.getState().number&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"直接看一个简单的例子\"><a href=\"#直接看一个简单的例子\" class=\"headerlink\" title=\"直接看一个简单的例子\"></a>直接看一个简单的例子</h2><ul>\n<li><p>index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Counter <span class=\"keyword\">from</span> <span class=\"string\">'./Counter'</span></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter</span>/&gt;</span></span>, <span class=\"built_in\">window</span>.root)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state = &#123;number: <span class=\"number\">0</span>&#125;, action</span>) </span>&#123;  <span class=\"comment\">//可以给state设置初始值</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'ADD'</span>: <span class=\"comment\">//ADD、MINUS是提前定义好的各种action</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>: state.number + action.count&#125;; <span class=\"comment\">//匹配action中的type，返回新的state</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'MINUS'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">number</span>: state.number - action.count&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore(reducer);  <span class=\"comment\">//创建一个状态树</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Counter.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store.js'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 组件更新 属性的更新 更新状态 ,将redux中的数据转化成自己的状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(store.getState());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">n</span>:store.getState().number&#125;  <span class=\"comment\">//store.getState() 拿到store里的state</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.un = store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  <span class=\"comment\">//订阅 每次dispatch后更新状态</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">n</span>:store.getState().number&#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillUnmount()&#123; <span class=\"comment\">//组件销毁时 需要将其监听的函数移除掉</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.un();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">            &lt;button onClick=&#123;()=&gt;&#123;  //每次dispatch后都需要重新更新状态=&gt;subscribe</span><br><span class=\"line\">                store.dispatch(&#123;type:'ADD',count:1&#125;)  //提交带有type属性的action</span><br><span class=\"line\"><span class=\"xml\">            &#125;&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;this.state.n&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">            &lt;button onClick=&#123;()=&gt;&#123;</span><br><span class=\"line\">                store.dispatch(&#123;type:'MINUS',count:1&#125;)</span><br><span class=\"line\"><span class=\"xml\">            &#125;&#125;&gt;-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["redux"],"tags":["react redux"]},{"title":"Express的基础语法","url":"http://zhangjuntao.com.cn/2018/01/08/Express的基础语法/","content":"<p>express是node的一个框架，我们可以基于express快速搭建一个web服务，并且提供一些供客户端调用的api接口（支持中间件、支持路由处理等）；还有一个框架和它类似，叫做koa.</p>\n<blockquote>\n<p>学习Express：<br><a href=\"http://www.expressjs.com.cn/4x/api.html\" target=\"_blank\" rel=\"noopener\">http://www.expressjs.com.cn/4x/api.html</a></p>\n</blockquote>\n<h3 id=\"安装Express\"><a href=\"#安装Express\" class=\"headerlink\" title=\"安装Express\"></a>安装Express</h3><p>如果当前电脑已经安装了yarn，我们可以基于yarn安装express及相关配套插件<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn init -y  生成package.<span class=\"keyword\">json文件</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">/*</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>* express：express核心框架</span><br><span class=\"line\"> * <span class=\"keyword\">body-parser：用来快速解析请求主体中内容的</span></span><br><span class=\"line\"> * express-session / cookie-parser：方便我们在express中操作session的</span><br><span class=\"line\"> */</span><br><span class=\"line\">yarn <span class=\"keyword\">add </span>express <span class=\"keyword\">body-parser </span>express-session cookie-parser</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建服务，监听端口\"><a href=\"#创建服务，监听端口\" class=\"headerlink\" title=\"创建服务，监听端口\"></a>创建服务，监听端口</h3><p><code>基于NODE内置模块，使用原生JS代码实现WEB服务</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>),</span><br><span class=\"line\">    fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>),</span><br><span class=\"line\">    url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;<span class=\"attr\">url</span>:reqURL, method, headers&#125;=req,</span><br><span class=\"line\">        &#123;pathname, query&#125;=url.parse(reqURL, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/getMatchList'</span> &amp;&amp; method==<span class=\"string\">'GET'</span>) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pathname===<span class=\"string\">'/reg'</span> &amp;&amp; method==<span class=\"string\">'POST'</span>)&#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8888</span>, ()=&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`server is success~`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><code>基于express框架完成</code></p>\n<blockquote>\n<p>express就是把我们自己用原生写的封装好了，我们以后直接调取使用即可（方便开发，有点类似于JQ）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>),</span><br><span class=\"line\">    app = express();</span><br><span class=\"line\">app.listen(<span class=\"number\">8888</span>, ()=&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`server is success~`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">`/getMatchList`</span>, (req, res)=&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//=&gt;等价于原生</span></span><br><span class=\"line\">    <span class=\"comment\">//req.url  请求的地址+问号传参</span></span><br><span class=\"line\">    <span class=\"comment\">//req.method 请求的方式(大写)</span></span><br><span class=\"line\">    <span class=\"comment\">//req.headers 请求头(小写)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//=&gt;EXPRESS新提供的</span></span><br><span class=\"line\">    <span class=\"comment\">//req.path 相当于我们原生中通过URL内置模块的PARSE方法解析出来的PATH-NAME</span></span><br><span class=\"line\">    <span class=\"comment\">//req.query 相当于解析出来的QUERY</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//=&gt;等价于原生</span></span><br><span class=\"line\">    <span class=\"comment\">//res.writeHead 重写响应头</span></span><br><span class=\"line\">    <span class=\"comment\">//res.write 响应主体</span></span><br><span class=\"line\">    <span class=\"comment\">//res.end 结束响应(响应主体)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     res.writeHead(200, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        'content-type': 'application/json'</span></span><br><span class=\"line\"><span class=\"comment\">     &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">     res.end(JSON.stringify(&#123;\"id\": 1, \"name\": \"zf \"&#125;));//=&gt;只能返回字符串或者Buffer格式数据</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     //---------</span></span><br><span class=\"line\"><span class=\"comment\">     fs.readFile('./index.html',(err,data)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">         if(err) return;</span></span><br><span class=\"line\"><span class=\"comment\">         res.writeHead(200,&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            'content-type':'text/html'</span></span><br><span class=\"line\"><span class=\"comment\">         &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">         res.end(data);</span></span><br><span class=\"line\"><span class=\"comment\">     &#125;);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     //=&gt;好麻烦</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//=&gt;EXPRESS独有的</span></span><br><span class=\"line\">    <span class=\"comment\">//res.sendFile('./index.html',&#123;root:__dirname&#125;); 读取指定的文件，并且把内容响应给客户端</span></span><br><span class=\"line\">    <span class=\"comment\">//res.json(&#123;\"id\":1,\"name\":\"zf\"&#125;); 我们可以直接放JSON,EXPRESS帮我们把它转换为字符串返回给客户端（并且设置好了响应头信息）</span></span><br><span class=\"line\">    <span class=\"comment\">//res.send() 综合体</span></span><br><span class=\"line\">    <span class=\"comment\">//res.statusCode = 200; 设置状态码</span></span><br><span class=\"line\">    <span class=\"comment\">//res.redirect() 重定向(对应状态码中的302/301)</span></span><br><span class=\"line\">    <span class=\"comment\">//res.sendStatus(404); 返回状态码并且附带一些状态码的描述信息</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">`/reg`</span>, (req, res)=&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"Express中间件\"><a href=\"#Express中间件\" class=\"headerlink\" title=\"Express中间件\"></a>Express中间件</h3><blockquote>\n<p>使用中间件的两大作用：<br>1、想要提取部分公共代码<br>2、想要在主体API逻辑处理前，做一些特殊处理（把传递的参数做特殊的处理）<br>…<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>),</span><br><span class=\"line\">    app = express();</span><br><span class=\"line\">app.listen(<span class=\"number\">8888</span>, ()=&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`server is success~`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=&gt;所有的客户端请求都会先执行这个中间件(然后执行NEXT后在进入下一个处理程序)</span></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">req, res, next</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//next:执行下一个处理(当前这个中间件根据情况，如果需要走到下一个操作，必须执行NEXT，如果不需要，直接响应内容即可)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.query.name) &#123;</span><br><span class=\"line\">        req.userName = req.query.name;<span class=\"comment\">//=&gt;把获取的内容写在了userName自定义属性上</span></span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.send(<span class=\"string\">`name必须传递`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//=&gt;只有请求的地址中包含`/user`的才会进入这个中间件</span></span><br><span class=\"line\">app.use(<span class=\"string\">`/user`</span>, (req, res, next)=&gt; &#123;</span><br><span class=\"line\">    req.userName += <span class=\"string\">'@'</span>;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">`/user`</span>, (req, res)=&gt; &#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">`My name is <span class=\"subst\">$&#123;req.userName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">`/article`</span>, (req, res)=&gt; &#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">`Article author is <span class=\"subst\">$&#123;req.userName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"Express中的路由router\"><a href=\"#Express中的路由router\" class=\"headerlink\" title=\"Express中的路由router\"></a>Express中的路由router</h3><blockquote>\n<p>在真实项目中，我们为了有效的管理接口，我们会把相同功能体系的接口进行归类；在实现的时候，也会分类实现（分组管理）；</p>\n<p>例如：<br>/user/signin<br>/user/signup</p>\n<p>/product/query<br>/product/search</p>\n<p>/log/info<br>  GET获取<br>  POST请求设置<br>  同一个地址，因为请求方式不一样，实现不一样的功能<br>…</p>\n<p>此类操作，我们可以基于Express中的路由来完成</p>\n</blockquote>\n<p>1、我们创建一个routers文件夹，在这个文件夹中存储所有功能模块的接口信息（分类存储）<br><img src=\"./1515297612509.png\" alt=\"\"></p>\n<p>2、在每一个路由模块中完成API接口的编写（举例：user模块）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>),</span><br><span class=\"line\">    router = express.Router();<span class=\"comment\">//=&gt;router和app其实差不多</span></span><br><span class=\"line\">router.use(<span class=\"function\">(<span class=\"params\">req, res, next</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`ok`</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">router.post(<span class=\"string\">`/signin`</span>, (req, res)=&gt; &#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'login success'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">router.post(<span class=\"string\">`/signup`</span>, (req, res)=&gt; &#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'register success'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;<span class=\"comment\">//=&gt;把创建的路由导出,方便后续调取使用</span></span><br></pre></td></tr></table></figure></p>\n<p>3、在server中需要调取使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>),</span><br><span class=\"line\">    app = express();</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"string\">`/user`</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'./routers/user'</span>));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Express中获取客户端传递的信息\"><a href=\"#Express中获取客户端传递的信息\" class=\"headerlink\" title=\"Express中获取客户端传递的信息\"></a>Express中获取客户端传递的信息</h3><blockquote>\n<p>客户端把信息传递给服务器：<br>1、问号传参（GET请求）<br>2、设置请求主体（POST请求）<br>3、设置请求头（cookie等信息传送）<br>…  </p>\n</blockquote>\n<p><code>问号传参 &amp; 请求头</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">`/query`</span>, (req, res)=&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(req.headers);<span class=\"comment\">//=&gt;通过REQ的HEADERS可以直接的获取请求头信息(想获取其中的某一个:REQ.HEADERS.HOST...)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    res.send(req.query);<span class=\"comment\">//=&gt;通过REQ中的QUERY就可以获取问号传递的参数值(并且存储的方式是KEY:VALUE)</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><code>请求主体</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//=&gt;基于传统的内置模块自己实现</span></span><br><span class=\"line\">app.use(<span class=\"string\">`/reg`</span>, (req, res, next)=&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//=&gt;POST请求获取请求主体内容,需要基于事件完成</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">``</span>;</span><br><span class=\"line\">    req.on(<span class=\"string\">'data'</span>, chunk=&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//=&gt;正在接收请求主体中的内容(一般内容偏多)</span></span><br><span class=\"line\">        str += chunk;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.on(<span class=\"string\">'end'</span>, ()=&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//=&gt;接收结束,此时STR存储的就是传递进来的信息</span></span><br><span class=\"line\">        <span class=\"comment\">//=&gt;客户端传递给服务器的信息一般都是字符串格式的(JSON字符串或者普通的FORMAT-DATA字符串[xxx=xxx&amp;xxx=xxx])</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//=&gt;真实项目中我们还要把字符串转化为对象方式(方便操作)</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>).parse(str);<span class=\"comment\">//=&gt;这个内置模块就是把FORMAT-DATA变为对象键值对的方式存储</span></span><br><span class=\"line\">        req.body = data;<span class=\"comment\">//=&gt;把解析后的数据放到REQ的自定义属性上,在其它的方法中可以获取使用</span></span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">`/reg`</span>, (req, res)=&gt; &#123;</span><br><span class=\"line\">    res.send(req.body);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这种方式太麻烦了，我们可以使用第三方插件搞定刚才处理的事情：<code>body-parser</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>: <span class=\"literal\">false</span>&#125;));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.raw());</span><br><span class=\"line\">app.use(bodyParser.text());</span><br><span class=\"line\">app.post(<span class=\"string\">`/reg`</span>, (req, res)=&gt; &#123;</span><br><span class=\"line\">    res.send(req.body);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Express中静态文件的处理\"><a href=\"#Express中静态文件的处理\" class=\"headerlink\" title=\"Express中静态文件的处理\"></a>Express中静态文件的处理</h3><blockquote>\n<p>基于express.static方法即可完成<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>),</span><br><span class=\"line\">    app = express();</span><br><span class=\"line\">app.listen(<span class=\"number\">8888</span>, ()=&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`server is success~`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=&gt;真实项目中,我们一般都静态资源文件(HTML/CSS/JS/IMG...)存放在DIST或者LIB或者PUBLIC或者BUILD等指定的文件夹中</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'dist'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=&gt;大体实现原理</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>),</span><br><span class=\"line\">    path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> expressStatic = <span class=\"function\"><span class=\"params\">p</span>=&gt;</span> (req, res, next)=&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathname = path.join(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/<span class=\"subst\">$&#123;p&#125;</span>`</span>, req.path);</span><br><span class=\"line\">    fs.readFile(pathname, (err, data)=&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//=&gt;找不到指定的文件</span></span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//=&gt;找到文件</span></span><br><span class=\"line\">            res.sendFile(pathname);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">app.use(expressStatic(<span class=\"string\">'dist'</span>));</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","categories":["Express"],"tags":["Express NODE"]},{"title":"Tag","url":"http://zhangjuntao.com.cn/tag/index.html","content":"","categories":[],"tags":[]},{"title":"About","url":"http://zhangjuntao.com.cn/about/index.html","content":"<p>about:</p>\n<ul>\n<li>type: me<br>icon: icon-user<br>text_value:<ul>\n<li>“中国矿业大学（北京）”</li>\n<li>“1992 重庆”</li>\n<li>“HTML / CSS / JavaScript / jQuery / zepto/ less / sass / gulp / webpack / Vue.js”</li>\n</ul>\n</li>\n<li>type: Github<br>icon: icon-github<br>text_key: Github<br>text_value: “@Jtrust”<br>text_value_url: <a href=\"https://github.com/Jtrust\" target=\"_blank\" rel=\"noopener\">https://github.com/Jtrust</a></li>\n<li>type: mail<br>icon: icon-mail<br>text_key: E-mail<br>text_value: “jtarch@163.com”</li>\n<li>type: location<br>icon: icon-location<br>text_value: 成都</li>\n</ul>\n","categories":[],"tags":[]},{"title":"Project","url":"http://zhangjuntao.com.cn/project/index.html","content":"","categories":[],"tags":[]},{"title":"Category","url":"http://zhangjuntao.com.cn/category/index.html","content":"","categories":[],"tags":[]}]